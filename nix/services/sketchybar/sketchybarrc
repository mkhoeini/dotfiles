(require '[babashka.process :refer [shell]])


(defn to-arg-str [k]
  (if (keyword? k)
    (let [kname (name k)
          arg (str/replace kname "-" "_")
          kns (namespace k)]
      (if (empty? kns)
        arg
        (str kns "." arg)))
    (str k)))

(comment
  (to-arg-str :icon/padding-left)
  (to-arg-str :a-b))


(defn map-to-props [m]
  (->> m
       (map (fn [[k v]] (str (to-arg-str k) "=\"" (to-arg-str v) \")))
       (str/join " ")))

(comment
  (map-to-props {:p 5 :a/b-c "hi"}))


(defn map-with-preamble-to-props [m]
  (let [preamble (get m :$ [])
        m (dissoc m :$)
        p-args (->> preamble
                    (map to-arg-str)
                    (str/join " "))
        m-args (map-to-props m)]
    (if (empty? p-args)
      m-args
      (str p-args " " m-args))))

(comment
  (map-with-preamble-to-props {:woo 15})
  (map-with-preamble-to-props {:$ [:a/b :a-a/c-d]
                               :e 5
                               :f/g "hi"}))


(defn conf-to-props [conf]
  (->> conf
       (mapcat seq)
       (map (fn [[domain args]]
              (let [a-str (map-with-preamble-to-props args)]
                (str "--" (to-arg-str domain) " " a-str))))
       (str/join " ")))

(comment
  (->> [{:bar {:$ [:aaa]
               :hi :there}}
        {:def {:woo 15}}]
       (conf-to-props)))


(def bar
  {:position :top
   :height 40
   :blur-radius 30
   :color "0x40000055"})

(def default
  {:padding-left 5
   :padding-right 5
   :icon/font "Iosevka Nerd Font:Bold:17.0"
   :icon/color "0xffffffff"
   :icon/padding-left 4
   :icon/padding-right 4
   :label/font "Iosevka Nerd Font:Bold:14.0"
   :label/color "0xffffffff"
   :label/padding-left 4
   :label/padding-right 4})

(comment
  (def PLUGIN_DIR "."))

(def space-icons
  (->> ["1" "2" "3" "4" "5" "6" "7" "8" "9" "10"]
     (mapcat (fn [i icn]
               (let [sid (str "space." i)
                     space {:$ [sid]
                            :space (str i)
                            :icon icn
                            :icon/padding-left 7
                            :icon/padding-right 7
                            :background/color "0x40ffffff"
                            :background/corner-radius 5
                            :background/height 25
                            :label/drawing "off"
                            :script (str PLUGIN_DIR "/space.sh")
                            :click-script (str "yabai -m space --focus " i)}]
                 [{:add {:$ [:space sid :left]}}
                  {:set space}]))
             (range 1 1000))))


(def left-items
  [{:add {:$ [:item :chevron :left]}}
   {:set {:$ [:chevron]
          :icon ""
          :label/drawing :off}}
   {:add {:$ [:item :front-app :left]}}
   {:set {:$ [:front-app]
          :icon/drawing :off
          :script (str PLUGIN_DIR "/front_app.sh")}}
   {:subscribe {:$ [:front-app :front-app_switched]}}])

(def right-items
  [{:add {:$ [:item :clock :right]}}
   {:set {:$ [:clock]
          :update-freq 10
          :icon ""
          :script (str PLUGIN_DIR "/clock.sh")}}
   {:add {:$ [:item :volume :right]}}
   {:set {:$ [:volume]
          :script (str PLUGIN_DIR "/volume.sh")}}
   {:subscribe {:$ [:volume :volume-change]}}
   {:add {:$ [:item :battery :right]}}
   {:set {:$ [:battery]
          :update-freq 120
          :script (str PLUGIN_DIR "/battery.sh")}}
   {:subscribe {:$ [:battery :system-woke :power-source-change]}}])

(def conf
  (into []
        (concat [{:bar bar}
                 {:default default}]
                space-icons
                left-items
                right-items)))


(def args-str (conf-to-props conf))

;; (print args-str)

(shell (str "sketchybar " args-str))

(shell "sketchybar --update")
